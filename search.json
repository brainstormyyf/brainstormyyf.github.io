[{"content":"短代码是Hugo中的一种自定义标记语法，它允许你在Markdown文件中插入预定义的HTML代码片段。\n什么是短代码 Hugo 中的短代码（Shortcodes）是一个强大的功能，它允许你在Markdown文件中插入自定义的HTML代码，而不必编写HTML标签。Hugo会在生成静态网站时将短代码替换为相应的HTML代码，这使得Markdown文件的编写更加简洁和直观，同时保持了内容的纯文本格式。\n在Hugo主题的模板文件中，短代码会被定义为一个函数，它接受参数并返回HTML代码。例如，一个简单的短代码函数可能如下所示：\n1\u0026lt;!-- shortcode-name.html --\u0026gt; 2\u0026lt;div\u0026gt; 3 \u0026lt;!-- 短代码的实现 --\u0026gt; 4\u0026lt;/div\u0026gt; 在Markdown文件中使用短代码时，Hugo会在生成静态网站时将短代码替换为相应的HTML代码。\nHugo内置短代码 Figure： 是 Markdown 中图像语法的延伸。 Gist：显示 GitHub gist 代码。 Highlight：显示高亮代码。 Param：获取当前页面的参数，如无则回退到网站参数。 ref and relref：返回指定页面的固定链接（ref）或相对固定链接（relref）。 Bootstrap 短代码 此为HB主题中内置的短代码\nBootstrap 短代码列表。\nAlert：显示警告信息，支持多种样式、图标和标题。 Clearfix：清除浮动的内容，如浮动图片。 Collapse：隐藏和显示内容。 Config Toggle：从一个代码库中生成一个配置切换，支持 YAML、TOML 和 JSON。 Icon Grid：显示带有图标、标题和描述的 icon grid。 Lead：使一个段落脱颖而出。 Ratio：完美的响应式处理视频或幻灯片的嵌入，基于父体的宽度。 Toggle：比 config toggle 更加通用，设计用于任何内容，如 SDK 代码。 详情请参考文章：短代码 - 内容 - 用户手册 - HB 框架 (hbstack.dev)\n","date":1708363960,"headings":[{"anchor":"bootstrap-短代码","title":"Bootstrap 短代码"},{"anchor":"hugo内置短代码","title":"Hugo内置短代码"},{"anchor":"什么是短代码","title":"什么是短代码"}],"kind":"page","lang":"zh-hans","series":["hugo博客"],"summary":"短代码是Hugo中的一种自定义标记语法，它允许你在Markdown文件中插入预定义的HTML代码片段。\n","title":"短代码","url":"/hugo%E5%8D%9A%E5%AE%A2/%E7%9F%AD%E4%BB%A3%E7%A0%81/","year":"2024"},{"content":"文档属性的内容及含意介绍\n一、内容原型 在 Hugo 中，archetypes 文件夹用于存储内容原型。内容原型是一些模板文件，当使用 hugo new 命令创建新内容时，它们会用作默认的前置元数据文件。这些原型文件通常包含了一些基础的前置元数据(文档属性)，如标题、日期和布局设置。\n在 Hugo 中，当你使用 hugo new 命令创建一个新的内容文件时，Hugo 会按照以下顺序来检索内容原型（archetypes）：\n检查内容类型：Hugo 会首先确定你要创建的内容的类型。这通常是通过你提供的命令参数来确定的，例如 hugo new post/my-new-post.md 会创建一个类型为 \u0026ldquo;post\u0026rdquo; 的新内容文件。 查找内容原型：一旦内容类型被确定，Hugo 会尝试在 archetypes 目录中查找与内容类型相匹配的原型文件。原型文件的命名通常是基于内容类型的，例如 archetypes/post.md。 应用默认原型：如果你没有为特定内容类型提供原型文件，Hugo 会退而求其次，查找一个名为 default.md 的默认原型文件。 使用原型创建内容：找到合适的原型文件后，Hugo 会使用它来创建新的内容文件。原型文件中的前置元数据会被插入到新内容文件的前置元数据部分。 提示用户输入：在某些情况下，Hugo 可能会提示用户输入缺失的前置元数据值，尤其是如果原型文件中包含了占位符。 生成新内容文件：最后，Hugo 会生成新的内容文件，并将其保存在指定的目录中。 例如，如果你运行命令 hugo new post/my-first-post.md，Hugo 会：\n确定内容类型为 \u0026ldquo;post\u0026rdquo;。 查找 archetypes/post.md 文件。 如果找到，使用 archetypes/post.md 中的前置元数据来创建 content/post/my-first-post.md 文件。 如果没有找到特定于 \u0026ldquo;post\u0026rdquo; 的原型文件，Hugo 会尝试使用 archetypes/default.md。 如果连默认原型文件都没有，Hugo 会创建一个没有前置元数据的新内容文件。 内容原型是一个非常有用的功能，因为它可以帮助你确保所有新创建的内容都包含必要的前置元数据，从而保持网站的一致性和组织性。 二、文档属性 1.文章属性 在HB主题中，包含以下文档属性（元数据）：\n属性 说明 title 文档的标题。 date 文档的创建或最后修改日期。 draft 一个布尔值，表示文档是否为草稿。如果设置为 true，则不会在生成网站时显示。 layout 定义了页面的布局。在 Hugo 中，这通常是一个文件夹或模板的名称。HB主题里可选landing落地窗布局，文章首页展示大图。 type 文档的类型或部分。在 Hugo 中，这通常用于组织内容。HB主题里可选docs和blog linkTitle 如果文档是一个系列的一部分，linkTitle 用于定义在导航中的显示名称。 nav_weight 定义了文档在导航菜单中的权重或排序。越小越靠前。 authors 文档的作者列表。 series 文档所属的专栏。 tag 文档的标签列表。 nav_icon 定义了文档在导航菜单中的图标。这通常是一个字体图标或图像。 vendor 图标的来源库或框架名称。例如，bs 可能指的是 Bootstrap。nav_icon的子属性。 name 图标的名称。nav_icon的子属性。 menu （可选）在导航栏菜单栏名称，图标的设置 这些属性在 Hugo 博客中用于定义和自定义文档的各个方面，包括其结构、外观和导航菜单中的显示方式。\n2.导航栏属性 特别的关于menu属性：\n在 Hugo 主题中，menu 是一个用于定义导航菜单的结构，它允许您自定义菜单的布局、内容和外观。以下是 menu 属性及其含义的表格：\n属性 说明 main 定义主菜单的配置。 parent 定义菜单项的父容器。在 Hugo 中，这通常是一个布局文件或模板。 weight 定义菜单项的权重或排序。数值越小，菜单项在列表中的位置越靠前。 params 一个对象，用于定义菜单项的额外参数。这些参数可以用于自定义菜单项的显示和行为。 description 菜单项的描述文本，通常用于工具提示或菜单项的附加信息。 icon 定义菜单项的图标。这通常是一个字体图标或图像。 vendor 图标的来源库或框架名称。例如，bs 可能指的是 Bootstrap。 name 图标的名称。 className 添加到图标元素的类名，可以用于进一步自定义图标的外观。 color 图标的颜色 例如，以下是一个 Hugo 主题中 menu 部分的示例配置：\n1menu: 2 main: 3 parent: column 4 weight: 2 5 params: 6 description: 环境配置 7 icon: 8 vendor: bs 9 name: toggles 10 className: text-primary 11 # color: blue 在这个例子中，main 菜单项被定义为 column 布局的子元素，具有 2 的权重。params 对象包含了菜单项的描述和图标配置，其中图标来自 Bootstrap 框架，名称为 toggles，并且添加了一个名为 text-primary 的类名。 这些属性在 Hugo 主题的配置文件中用于定义和自定义菜单的各个方面，包括其结构、外观和导航菜单中的显示方式。\n三、图标 尽管图标的根参数不同，如 icon 或 nav_icon，但成员参数是相同的。\n1.成员参数 vendor\n图标供应商名称，默认支持 bootstrap（bs），要使用其他供应商，需要导入相应的模块，以 Font Awesome 图标为例。\nhugo.yaml\n1module: 2 imports: 3 - path: github.com/hugomods/icons/vendors/font-awesome 现在你可以使用 Font Awesome 实体（fas）、常规（far）和品牌（fab）图标了。\nname\n图标的名称，如 book、house。\ncolor\n图标的十六进制颜色，如 green, #7952B3。\nclassName\n图标样式的附加类名，如 text-success、text-primary。\n1\u0026lt;p class=\u0026#34;text-primary\u0026#34;\u0026gt;.text-primary\u0026lt;/p\u0026gt; 2\u0026lt;p class=\u0026#34;text-secondary\u0026#34;\u0026gt;.text-secondary\u0026lt;/p\u0026gt; 3\u0026lt;p class=\u0026#34;text-success\u0026#34;\u0026gt;.text-success\u0026lt;/p\u0026gt; 4\u0026lt;p class=\u0026#34;text-danger\u0026#34;\u0026gt;.text-danger\u0026lt;/p\u0026gt; 5\u0026lt;p class=\u0026#34;text-warning\u0026#34;\u0026gt;.text-warning\u0026lt;/p\u0026gt; 6\u0026lt;p class=\u0026#34;text-info\u0026#34;\u0026gt;.text-info\u0026lt;/p\u0026gt; 7\u0026lt;p class=\u0026#34;text-light bg-dark\u0026#34;\u0026gt;.text-light\u0026lt;/p\u0026gt; 8\u0026lt;p class=\u0026#34;text-dark\u0026#34;\u0026gt;.text-dark\u0026lt;/p\u0026gt; 9\u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;.text-muted\u0026lt;/p\u0026gt; 10\u0026lt;p class=\u0026#34;text-white bg-dark\u0026#34;\u0026gt;.text-white\u0026lt;/p\u0026gt; 2.供应商Vendor Vendor Vendor Name Shorthand Module Path Bootstrap Icons bootstrap bs github.com/hugomods/icons/vendors/bootstrap Feather Icons feather - github.com/hugomods/icons/vendors/feather Font Awesome Brands Icons font-awesome-brands fab github.com/hugomods/icons/vendors/font-awesome Font Awesome Regular Icons font-awesome-regular far github.com/hugomods/icons/vendors/font-awesome Font Awesome Solid Icons font-awesome-solid fas github.com/hugomods/icons/vendors/font-awesome Lucide Icons lucide - github.com/hugomods/icons/vendors/lucide Material Design Icons mdi - github.com/hugomods/icons/vendors/mdi Simple Icons simple-icons simple github.com/hugomods/icons/vendors/simple-icons Tabler Icons tabler - github.com/hugomods/icons/vendors/tabler 3.图标搜索 所有可用的图标都可以在 Hugo Icons Module 上找到\n也可在官网查询\nBootstrap Icons :Bootstrap 图标库 · Bootstrap 官方开源图标（icon）库 (bootcss.com) Simple Icons:Simple Icons ","date":1708359820,"headings":[{"anchor":"1成员参数","title":"1.成员参数"},{"anchor":"1文章属性","title":"1.文章属性"},{"anchor":"2供应商vendor","title":"2.供应商Vendor"},{"anchor":"2导航栏属性","title":"2.导航栏属性"},{"anchor":"3图标搜索","title":"3.图标搜索"},{"anchor":"一内容原型","title":"一、内容原型"},{"anchor":"三图标","title":"三、图标"},{"anchor":"二文档属性","title":"二、文档属性"}],"kind":"page","lang":"zh-hans","series":["hugo博客"],"summary":"文档属性的内容及含意介绍\n","title":"文档属性","url":"/hugo%E5%8D%9A%E5%AE%A2/%E6%96%87%E6%A1%A3%E5%B1%9E%E6%80%A7/","year":"2024"},{"content":"关于markdown语法的速查\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成结构化的 HTML 文档。Markdown 语法简洁明了，易于学习，因此在程序员和写作者中广受欢迎。下面将详细介绍 Markdown 的基本语法。\n标题 Markdown 支持六级标题，分别使用 # 符号表示。# 的数量代表标题的级别。\n1# 一级标题 2## 二级标题 3### 三级标题 4#### 四级标题 5##### 五级标题 6###### 六级标题 段落与换行 段落之间使用一个或多个空行分隔。如果需要在段落内强制换行，可以在行尾添加两个或更多的空格然后回车。\n1这是一个段落。 2这是另一个段落。 强调 斜体 ：将文字包围在 * 或 _ 符号之间。 粗体 ：将文字包围在 ** 或 __ 符号之间。 粗斜体 ：将文字包围在 *** 或 ___ 符号之间。 列表 无序列表使用 *、+ 或 - 作为列表标记。 有序列表使用数字后跟英文句点。 1- 无序列表项一 2- 无序列表项二 3- 无序列表项三 4 51. 有序列表项一 62. 有序列表项二 73. 有序列表项三 链接与图片 链接：使用 [文本](链接地址 \u0026quot;标题\u0026quot;) 的格式。 图片：使用 ![替代文本](图片地址 \u0026quot;标题\u0026quot;) 的格式。 1[这是一个链接](https://www.example.com \u0026#34;示例网站\u0026#34;) 2![这是一张图片](https://www.example.com/image.jpg \u0026#34;示例图片\u0026#34;) 引用 使用 \u0026gt; 符号表示引用，符号后需紧跟一个空格。\n1\u0026gt; 这是一个引用。 代码 行内代码：使用一对反引号 ` 包围代码。 代码块：使用三个反引号 ``` 包围代码，并可选指定语言。 1`这是行内代码` 2 3```python 4这是代码块 表格 使用 | 和 - 来创建表格。\n1| 标题1 | 标题2 | 标题3 | 2|-------|-------|-------| 3| 单元格1 | 单元格2 | 单元格3 | 4| 单元格4 | 单元格5 | 单元格6 | 标题1 标题2 标题3 单元格1 单元格2 单元格3 单元格4 单元格5 单元格6 分隔线 使用三个或更多的 *、- 或 _ 来创建分隔线。\n1--- HTML 元素 Markdown 支持直接插入 HTML 元素。\n1\u0026lt;p\u0026gt;这是一个 HTML 段落。\u0026lt;/p\u0026gt; 自动链接 使用 \u0026lt; 和 \u0026gt; 包围 URL 或邮箱地址，自动生成链接。\n1\u0026lt;https://www.example.com\u0026gt; 以上是 Markdown 的基本语法指南，掌握这些基本用法后，可以更高效地编写文档和博客。Markdown 的简洁性和易用性使其成为文本处理的理想选择。\n","date":1708358595,"headings":[{"anchor":"html-元素","title":"HTML 元素"},{"anchor":"代码","title":"代码"},{"anchor":"分隔线","title":"分隔线"},{"anchor":"列表","title":"列表"},{"anchor":"引用","title":"引用"},{"anchor":"强调","title":"强调"},{"anchor":"标题","title":"标题"},{"anchor":"段落与换行","title":"段落与换行"},{"anchor":"自动链接","title":"自动链接"},{"anchor":"表格","title":"表格"},{"anchor":"链接与图片","title":"链接与图片"}],"kind":"page","lang":"zh-hans","series":["hugo博客"],"summary":"关于markdown语法的速查\n","tags":["markdown"],"title":"Markdown语法","url":"/hugo%E5%8D%9A%E5%AE%A2/markdown%E8%AF%AD%E6%B3%95/","year":"2024"},{"content":"本博客平台使用到的技术，hugo和HB框架的安装使用\n一、简介 我在大四寒假期间搭建了这个博客平台，这个专栏记录了我搭建这个博客平台的过程，并且汇集了一些使用HB框架写文章时经常用到的函数或者说方法，方便查阅。\n这个网站是基于hugo框架搭建的静态博客 主题是HB Framework 网站托管在github page上 使用自定义域名yaoyifeng.top 使用腾讯云的cdn来加快国内的访问速度 二、环境安装 1.安装hugo Hugo 是一个广受欢迎的静态网站生成器，由 Go 语言编写。它能够将Markdown、HTML等格式的文件和模板转换为静态网页。Hugo 以其快速生成网站的能力而闻名，这使得它成为许多开发者和博客作者的首选工具。 安装 Hugo 的方法取决于操作系统。以下是几种常见操作系统的安装步骤：\nWindows\n访问 Hugo 的 GitHub 发布页面。 下载适合你系统的 .exe 文件（例如 hugo_extended_0.111.3_windows-amd64.zip）。 解压下载的文件，并将 hugo.exe 文件移动到一个在系统 PATH 环境变量中的目录下，这样你就可以在命令行中全局访问 Hugo 命令。 打开命令提示符或 PowerShell，输入 hugo version 来验证安装是否成功。 HB 使用 Hugo Pipes 来编译 SCSS，因此需要扩展版（extended）的 Hugo。 建议将hugo.exe添加到系统/用户环境变量中，否则只能在当前目录下访问hugo，给使用带来不便 macOS\n打开终端。 使用 Homebrew 安装 Hugo。如果尚未安装 Homebrew，请先安装它。安装 Homebrew 后，输入以下命令： 1brew install hugo 安装完成后，输入 hugo version 来验证安装是否成功。 Linux\n打开终端。 使用包管理器安装 Hugo。例如，在 Ubuntu 或 Debian 上，可以使用以下命令： 1sudo apt-get install hugo 安装完成后，输入 hugo version 来验证安装是否成功。 通过 Go 语言安装 如果已经安装了 Go 语言环境，也可以通过以下命令安装 Hugo：\n1go install github.com/gohugoio/hugo@latest 安装完成后，应该能够通过在命令行中输入 hugo 来访问 Hugo 命令。\n2.安装go 一般来说使用hugo时并不需要使用go，但我用的HB Framework主题是一个模块化的框架，需要使用go语言来下载和更新hugo模块，具体见HB - Hugo Bootstrap 框架 (hbstack.dev)\n要下载和安装 Go 语言（也称为 Golang），请遵循以下步骤。请注意，步骤可能会因您的操作系统而异。\nWindows\n访问 Go 官方下载页面。 根据系统是 32 位还是 64 位，下载相应的 .msi 安装包。 运行下载的 .msi 文件，并按照安装向导的指示完成安装。 安装过程中，确保将 Go 安装路径添加到系统环境变量的 PATH 中。 安装完成后，重启任何已打开的命令提示符或 PowerShell 窗口。 在命令行中输入 go version 来验证安装是否成功。 同安装hugo一样，安装go不会自动将安装路径添加到环境变量里，需要手动添加 macOS\n访问 Go 官方下载页面。 下载适用于 macOS 的 .pkg 安装包。 打开下载的 .pkg 文件，并按照安装向导的指示完成安装。 安装完成后，在终端中输入 go version 来验证安装是否成功。 Linux\n访问 Go 官方下载页面。 下载适用于 Linux 的 .tar.gz 压缩包。 打开终端，切换到您想要安装 Go 的目录（例如 cd /usr/local）。 使用 tar 命令解压下载的文件，例如： 1sudo tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz 将 $VERSION、$OS 和 $ARCH 替换为适当的值，例如 go1.18.3.linux-amd64.tar.gz。 将 Go 的 bin 目录添加到 PATH 环境变量中。可以通过修改 ~/.profile 或 ~/.bashrc 文件来实现这一点，例如： 1export PATH=$PATH:/usr/local/go/bin 在终端中输入 source ~/.profile 或 source ~/.bashrc 来更新当前会话的环境变量。 输入 go version 来验证安装是否成功。 3.安装git 关于git的介绍，安装使用方法详见环境配置专栏\n4.安装node.js 要求 Node.js 16 或后续版本。\nWindows\n访问 Node.js 官方网站 nodejs.org。 下载适合系统的安装包（建议选择 LTS 版本，因为它更稳定）。 运行下载的安装程序 .msi 文件。 按照安装向导的指示完成安装。默认情况下，安装程序会自动将 Node.js 添加到系统路径中。 安装完成后，打开命令提示符或 PowerShell。 输入 node -v 和 npm -v 来验证 Node.js 和 npm 是否正确安装。 node.js安装过程中会自动添加到系统环境变量中，无需手动添加 macOS\n访问 Node.js 官方网站 nodejs.org。 下载适合系统的安装包（建议选择 LTS 版本）。 打开下载的 .pkg 文件。 按照安装向导的指示完成安装。 安装完成后，打开终端。 输入 node -v 和 npm -v 来验证 Node.js 和 npm 是否正确安装。 Linux\n对于大多数 Linux 发行版，可以使用包管理器来安装 Node.js，以下是一些示例：\n使用 Ubuntu 或 Debian 的 apt-get：\n1curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - 2sudo apt-get install -y nodejs 使用 CentOS 或 Fedora 的 yum：\n1curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash - 2sudo yum install -y nodejs 使用 Arch Linux 的 pacman：\n1sudo pacman -S nodejs npm 安装完成后，打开终端并输入 node -v 和 npm -v 来验证 Node.js 和 npm 是否正确安装。\n使用 nvm (Node Version Manager)\n如果需要管理多个 Node.js 版本，可以使用 nvm（Node Version Manager）\n安装 nvm：\n对于 macOS 和 Linux，可以使用以下命令：\n1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 2# 或 3wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 对于 Windows，可以使用 nvm-windows。\n使用 nvm 安装 Node.js：\n1nvm install node # 安装最新版本 2nvm install --lts # 安装 LTS 版本 3nvm use node # 使用已安装的最新版本 4nvm use --lts # 使用已安装的 LTS 版本 安装完成后，可以通过输入 node -v 和 npm -v 来验证 Node.js 和 npm 是否正确安装。\nHB 依赖以下 Node.js 包。\n名称 描述 PostCSS CLI 用于转变样式。 RTLCSS 将 LTR CSS 转换为 RTL，如果你没有 RTL 网站则可选。 Autoprefixer 解析 CSS 并在 Can I Use 规则中添加对应的前缀。 PurgeCSS 移除未使用的 CSS。 NPM 已被包含于 Node.js 安装中，你可以选择局部或全局地安装这些包。\n局部安装 1npm i -D postcss-cli @fullhuman/postcss-purgecss autoprefixer rtlcss 局部安装将依赖写入 package.json，以便部署时通过 npm i 安装这些包，而无需记住这些繁杂的包名。\n全局安装 1sudo npm i -g postcss-cli @fullhuman/postcss-purgecss autoprefixer rtlcss 该命令只需执行一次，后续的 HB 站点无需再次执行此命令。\n两者都是有效的，HB 会优先局部查找需要的包。\n三、HB主题安装 1.克隆仓库\n1git clone --depth 1 https://github.com/hbstack/theme blog 2cd blog 其中的 blog 是本地目录名称，请随意修改。\n2.修改模块路径\n首先修改位于 go.mod 的模块路径，将其中的 module github.com/hbstack/theme 替换为你的，如：module github.com/user/repo。\n11sed -i -e \u0026#39;s/module\\ github.com\\/hbstack\\/theme/module\\ github.com\\/user\\/repo/\u0026#39; go.mod 3.提交改动到本地仓库\n1git add . 2git commit --amend 修改提交信息保存即可，如：First commit。\n4.修改远程仓库\n1git remote set-url origin https://github.com/user/repo 5.推送\n1git push origin main 四、Hugo 模块代理 Go 官方的模块代理服务器于国内是无法正常使用的。不过可以通过设置代理服务器解决，本文将列出一些可用的 Go 代理服务器。而这也同样适用于 Hugo 模块。\n代理服务器 URL GOPROXY.CN (七牛云) https://goproxy.cn/ GOPROXY.IO https://goproxy.io/ 阿里云 https://mirrors.aliyun.com/goproxy/ 腾讯云 https://mirrors.tencent.com/go/ 下面给出在windows上设置代理服务器的方法：\n1$env:GOPROXY = \u0026#34;https://goproxy.cn/,direct\u0026#34; 2$env:HUGO_MODULE_PROXY = \u0026#34;https://goproxy.cn/,direct\u0026#34; 五、启动 Hugo 服务器 1.安装构建工具\n1npm ci 2.启动hugo服务器\n于开发模式下预览\n1npm run dev 于生产模式下预览\n1npm run prod package.json文件里面记录了npm所能运行的脚本\n{ \u0026#34;devDependencies\u0026#34;: { \u0026#34;glob\u0026#34;: \u0026#34;^10.3.10\u0026#34;, \u0026#34;prettier\u0026#34;: \u0026#34;^3.0.0\u0026#34;, \u0026#34;prettier-plugin-go-template\u0026#34;: \u0026#34;^0.0.15\u0026#34; }, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;hugo server -p 7070 --gc --buildDrafts --enableGitInfo\u0026#34;, \u0026#34;prod\u0026#34;: \u0026#34;npm run clean \u0026amp;\u0026amp; hugo server -e production --minify --gc --renderToDisk --disableFastRender --enableGitInfo -b http://localhost:7080 -p 7080\u0026#34;, \u0026#34;docker\u0026#34;: \u0026#34;docker run -v $PWD:/src -p 7070:7070 -p 7071:7071 -p 7072:7072 hugomods/hugo:exts hugo server --bind 0.0.0.0 -p 7070\u0026#34;, \u0026#34;docker-prod\u0026#34;: \u0026#34;docker run -v $PWD:/src -p 7080:7080 -p 7081:7081 -p 7082:7082 hugomods/hugo:exts hugo server --bind 0.0.0.0 -e production --minify --gc --renderToDisk --disableFastRender --enableGitInfo -b http://localhost:7080 -p 7080\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34;, \u0026#34;clean\u0026#34;: \u0026#34;del hugo_stats.json \u0026amp;\u0026amp; rmdir /s /q public\u0026#34;, \u0026#34;clean-build\u0026#34;: \u0026#34;npm run clean \u0026amp;\u0026amp; npm run build\u0026#34;, \u0026#34;update\u0026#34;: \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo mod tidy\u0026#34;, \u0026#34;translate\u0026#34;: \u0026#34;node ./scripts/translate.js\u0026#34;, \u0026#34;decap-server\u0026#34;: \u0026#34;npx decap-server\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;@fullhuman/postcss-purgecss\u0026#34;: \u0026#34;^5.0.0\u0026#34;, \u0026#34;autoprefix\u0026#34;: \u0026#34;^1.0.1\u0026#34;, \u0026#34;autoprefixer\u0026#34;: \u0026#34;^10.4.13\u0026#34;, \u0026#34;postcss-cli\u0026#34;: \u0026#34;^10.1.0\u0026#34;, \u0026#34;postcss-purgecss\u0026#34;: \u0026#34;^5.0.0\u0026#34;, \u0026#34;rtlcss\u0026#34;: \u0026#34;^4.0.0\u0026#34; } } Hugo Server 生产模式的必要参数\n若需要在生产模式下使用 Hugo Server，需要指定 --disableFastRender 和 --renderToDisk，否则 PurgeCSS 和 PostCSS 会出现意想不到的问题。\n1hugo server \\ 2 --disableFastRender \\ 3 --renderToDisk \\ 4 -e production \\ 5 -b http://localhost:1314 \\ 6 -p 1314 ","date":1708353009,"headings":[{"anchor":"1安装hugo","title":"1.安装hugo"},{"anchor":"2安装go","title":"2.安装go"},{"anchor":"3安装git","title":"3.安装git"},{"anchor":"4安装nodejs","title":"4.安装node.js"},{"anchor":"一简介","title":"一、简介"},{"anchor":"三hb主题安装","title":"三、HB主题安装"},{"anchor":"二环境安装","title":"二、环境安装"},{"anchor":"五启动-hugo-服务器","title":"五、启动 Hugo 服务器"},{"anchor":"四hugo-模块代理","title":"四、Hugo 模块代理"}],"kind":"page","lang":"zh-hans","series":["hugo博客"],"summary":"本博客平台使用到的技术，hugo和HB框架的安装使用\n","title":"简介\u0026安装","url":"/hugo%E5%8D%9A%E5%AE%A2/%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/","year":"2024"},{"content":"油猴可以帮你干什么：全网VIP视频，下载全网音乐，右键复制限制解除，百度文库下载……\n一、前提准备：edge浏览器 要下载油猴，那首先不得不提的就是微软2020年发布的新款edge浏览器，edge是真香真香！有了edge再也不用Chrome了。edge浏览器让能登陆微软拓展商店和Chrome拓展商店，可以使用Tampermonkey等等功能丰富的拓展。什么是拓展插件呢，拓展插件就是可以让你个性化定义自己浏览器的工具，让你的浏览器超乎你想象。\nwin10系统的电脑会自带老版edge浏览器，你要把它首先升级到最新版，如果不是win10系统的电脑直接下载最新版edge浏览器就可。升级与下载操作都在edge官方网站上进行即可\n官网上会有这个浏览器的功能介绍，往下翻会有下载或更新入口。下载或更新完成后会在桌面创立一个快捷方式图标\n二、油猴的下载安装 双击桌面图标打开新版edge浏览器后，点击右上角的…，再点击拓展\n我浏览器已经下载了好多插件，所以右侧是满满的，大家的右侧应该是空空如也，点击获取Microsoft Edge拓展即可。\n然后会进入到如下页面\n然后网页下翻找到Tampermonkey\n或者直接搜索Tampermonkey\n点击图标进入后再点击获取\n再点击添加拓展\n成功后浏览器工具栏会出现这个标志\n出现这个图标即是成功安装好了，如果没有出现这个图标的话打开拓展页面，点击右侧开关打开\n这就安装好了脚本管理器，但我们还没有脚本，下一步就是安装相应脚本\n三、脚本的安装使用 一般人会直接给你油猴脚本网站地址去安装相应脚本，但我想先推荐个新建标签的拓展插件，通过这个你可以探索好多好玩有趣的网站\n按同样的方式添加拓展并启用后就可，这个可以自定义你的网址导航主页（要首先关掉电脑管家或杀毒软件的锁定浏览器主页）\n它会推荐很多有用的网址，比如拓展迷等等，也具有十分强大的网址搜索能力，点击右上角的无限符号\n然后搜索油猴脚本，点击打开\n即进入这个网站\n你可以随意查找或搜索自己想要的脚本安装并使用，一般脚本安装页都会有相应脚本的使用方法。我随便点击一个打开，下翻网页即会有使用说明，点击安装此脚本及进入安装页面\n然后点击安装即可\n安装完成后鼠标左键点击油猴图标，点击管理面板，查看相应脚本是否安装成功，是否启用。已启用开关打开即大功告成。\n如果你觉得这上的脚本不能满足你的需求，你也可以自己写脚本来满足自己的特定需求。\n因本人水平有限，只是一点经验之谈，如有错误请多多指教。（懵懂大一计算机学生突发奇想写此博客 ）\n","date":1708002462,"headings":[{"anchor":"一前提准备edge浏览器","title":"一、前提准备：edge浏览器"},{"anchor":"三脚本的安装使用","title":"三、脚本的安装使用"},{"anchor":"二油猴的下载安装","title":"二、油猴的下载安装"}],"kind":"page","lang":"zh-hans","series":["环境配置"],"summary":"","tags":["浏览器"],"title":"油猴脚本管理器的超详细下载安装使用教程——新手必看","url":"/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E7%8E%A9%E6%9C%BA%E6%8A%80%E5%B7%A7/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/","year":"2024"},{"content":"PyTorch环境搭建（windows版）\n首先确定自己电脑上是否有nvidia的显卡（就是游戏显卡RTX3050，RTX3060\u0026hellip;\u0026hellip;这些，必须是nvidia的显卡）\n如果自己电脑上没有显卡，就配置cpu版的pytorch即可。安装cpu版的pytorch参考步骤1，4，如果自己电脑上有gpu,就安装gpu版的pytorch，参考步骤1，2，3。\n1.Anaconda安装 anaconda是python的包管理器，可以很方便的管理不同项目的python环境，解决不同项目python包的环境冲突问题。\nTIPS：我们做python项目时要养成良好的习惯，不同的python项目要采取不同的python虚拟环境，不同的虚拟环境之间相互隔离，python版本和包均不共用。python虚拟环境的创建和管理常用anaconda。 安装步骤： 1、官网下载安装包：https://www.anaconda.com/distribution/ 2、运行并选择安装路径，等待安装完成。(要记得勾选 Add Anaconda to the system PATH environment variable，是为了将Anaconda添加到环境变量中。是的它显示不建议你这样做，但我建议你这样做，要不然还要自己手动把他添加到环境变量里)\n3、查看是否安装成功，cmd中输入conda回车，是否出现如下信息，有则说明安装成功。\n2.CUDA与CuDNN安装 (1)先检查自己的电脑所支持的CUDA版本是多少。 桌面右键点击进去NVIDIA控制面板，找到左下角的系统信息，点击组件，出现如下界面。\n从NVCUDA.DLL 这一行后面的CUDA 11.4说明我的电脑所支持的最高版本是11.4。\n(2)官网下载相对应的CUDA (https://developer.nvidia.com/cuda-toolkit-archive)\n我所支持的版本是11.4，所以我下载的是红色箭头所标出的那行。点击以后出现如下页面，选择第一个下载即可。\n下载完成后，在所在的文件夹下运行安装即可。 然后查看CUDA是否安装成功： cmd中运行到安装的文件目录下：\n1cd C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\bin 然后执行nvcc -V，查看是否出现如下信息，有则说明CUDA安装成功。\n如果输入nvcc -V 出现错误，考虑是否将Anaconds加入环境变量PATH中。\n(3)安装相对应版本的cuDNN。 进入官网： https://developer.nvidia.com/rdp/cudnn-download 需要注册并登录账号（这个需要一段时间），然后选择相对应的版本下载。\n我的是CUDA11.4，所以我选择的是第一个。等待下载完成后进行解压，得到一个cuda文件夹，进入之后，全选，复制到之前CUDA所安装的文件夹下，有重复的进行替换即可。\n查看cuDNN是否安装成功： 步骤如下：（进入安装的路径）\n出现如下Result = PASS 说明cuDNN安装成功。 可以再接着执行deviceQuery.exe，如果出现Result = PASS 说明CUDA和cuDNN都已经安装成功了。\n3.gpu版Pytorch安装 （1）先配置torch环境。 先打开Anaconda Prompt(anaconda)\n下面我们分析一下anaconda prompt每一条命令行的结构。（base）指的是当前所在的python环境是base环境。C:UsersYYF\u0026gt;指的是当前anaconda prompt所在的文件夹位置，我们要执行相关指令只需要在\u0026gt;后面输入指令，回车运行即可。\n然后我们然后输入\n1conda env list 这条语句会显示出当前已存在的python虚拟环境，如果是刚安装anaconda,应该只有一个base基环境。 下面我们新建立一个python虚拟环境(命名为new)\n1conda create –n new python=3.9.10 -n就相当于参数\u0026ndash;name,上面这条语句也可改为conda create \u0026ndash;name python=3.9.10 (这儿python=xxx可以自己指定python版本，这儿的new是你所创建的虚拟环境的名称，大家可以自己取) 然后激活环境： 在anaconda prompt中输入：\n1conda activate new 此时我们可以看到（）里面已经变为new，说明我们已经进入new这个虚拟环境。\n此时再进行python包的安装就是对这个虚拟环境操作，比如我们 pip install numpy（或者 conda install numpy）,再输入\n1conda list # 显示当前虚拟环境的所有包环境 此时我们看到new这个虚拟环境里面已经有numpy这个包了。\n（2）pytorch的安装\n法一：打开pytorch官网：https://pytorch.org/get-started/locally/（pytorch当前建议版本）或者 https://pytorch.org/get-started/previous-versions/ （pytorch的老版本）找到自己所对应版本的使用conda命令安装即可（会慢一些，但建议新手这样做）。\n法二：进入如下网址：https://download.pytorch.org/whl/torch_stable.html，下载自己所需要的torch和torchvision。 可以按快捷键ctrl+F进行搜索。 （不建议新手这样做）\n（3）等待安装完成。 查看pytorch环境是否安装成功：\n要记得先进入之前创建的环境中，然后依次输入蓝色方格中的代码，没有报错，且最后输出True，则说明pytorch环境安装完成。\n4.cpu版PyTorch安装 （1）先配置torch环境。 先打开Anaconda Prompt(anaconda)\n下面我们分析一下anaconda prompt每一条命令行的结构。（base）指的是当前所在的python环境是base环境。C:UsersYYF\u0026gt;指的是当前anaconda prompt所在的文件夹位置，我们要执行相关指令只需要在\u0026gt;后面输入指令，回车运行即可。\n然后我们然后输入\n1conda env list 这条语句会显示出当前已存在的python虚拟环境，如果是刚安装anaconda,应该只有一个base基环境。 下面我们新建立一个python虚拟环境(命名为new)\n1conda create –n new python=3.9.10 -n就相当于参数\u0026ndash;name,上面这条语句也可改为conda create \u0026ndash;name python=3.9.10 (这儿python=xxx可以自己指定python版本，这儿的new是所创建的虚拟环境的名称) 然后激活环境： 在anaconda prompt中输入：\n1conda activate new 此时我们可以看到（）里面已经变为new，说明我们已经进入new这个虚拟环境。\n此时再进行python包的安装就是对这个虚拟环境操作，比如我们 pip install numpy（或者 conda install numpy）,再输入\n1conda list # 显示当前虚拟环境的所有包环境 此时我们看到new这个虚拟环境里面已经有numpy这个包了。\n（2）pytorch的安装\n打开pytorch官网：https://pytorch.org/get-started/locally/（pytorch当前建议版本）或者 https://pytorch.org/get-started/previous-versions/ （pytorch的老版本）找到自己所对应版本的使用conda命令安装即可（会慢一些，但建议新手这样做）。\n（3）等待安装完成。 查看pytorch环境是否安装成功：\n要记得先进入之前创建的环境中，然后依次输入蓝色方格中的代码，没有报错，则说明pytorch环境安装完成。\n参考资料： 深度学习 | NVIDIA 开发者 浅析三种Anaconda虚拟环境创建方式和第三方包的安装-腾讯云开发者社区-腾讯云 (tencent.com) 《PyTorch深度学习实践》完结合集_哔哩哔哩_bilibili PyTorch\n","date":1707985156,"headings":[{"anchor":"1anaconda安装","title":"1.Anaconda安装"},{"anchor":"1先检查自己的电脑所支持的cuda版本是多少","title":"(1)先检查自己的电脑所支持的CUDA版本是多少。"},{"anchor":"2cuda与cudnn安装","title":"2.CUDA与CuDNN安装"},{"anchor":"2官网下载相对应的cuda","title":"(2)官网下载相对应的CUDA"},{"anchor":"3gpu版pytorch安装","title":"3.gpu版Pytorch安装"},{"anchor":"3安装相对应版本的cudnn","title":"(3)安装相对应版本的cuDNN。"},{"anchor":"4cpu版pytorch安装","title":"4.cpu版PyTorch安装"}],"kind":"page","lang":"zh-hans","series":["环境配置"],"summary":"","tags":["pytorch"],"title":"Pytorch安装教程","url":"/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/python/pytorch%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","year":"2024"},{"content":"在使用github等网站时，我们有时会遇到访问不稳定或无法访问的问题。这时，很多人会选择使用代理来解决问题。但挂上代理之后，我们仍然可能会遇到一个新问题：在命令行中进行下载或配置时，网络问题依然存在。比如，使用pip进行软件包的下载和安装（pip install -r requirements.txt），或者使用git进行代码的下载(git clone ,git push)，都可能因为网络问题而受阻。在我确认已经打开了全局代理的情况下，仍然出现了网络问题，这说明使用命令行进行的操作并没有走代理。\n有三种常用方式：\n①永久设置： linux系统下：\n1vim /etc/profile： 2 export http_proxy=\u0026#39;http://代理服务器IP:端口号\u0026#39; 3 export https_proxy=\u0026#39;http://代理服务器IP:端口号\u0026#39; 4source /etc/profile windows系统下：\n在C:\\User\\用户目录下，新建pip文件夹，然后在该文件夹下新建pip.ini文件。填写如下内容：\n1[global] 2index-url = https://pypi.tuna.tsinghua.edu.cn/simple 3proxy = http://XXXX.com:port 4[install] 5trusted-host=pypi.tuna.tsinghua.edu.cn ②临时设置（重连后失效）： 可以直接在此次命令行窗口运行:\n1export http_proxy=\u0026#39;http://代理服务器IP:端口号\u0026#39; 2export https_proxy=\u0026#39;http://代理服务器IP:端口号\u0026#39; 注意：设置之后可能使用ping时还是无法连接外网，但是pip时可以的，因为ping的协议不一样不能使用这个代理\n③单次设置： 直接在pip时设置代理也是可以的：\n1pip install -r requirements.txt --proxy=代理服务器IP:端口号 ","date":1707984496,"headings":[{"anchor":"临时设置重连后失效","title":"②临时设置（重连后失效）："},{"anchor":"单次设置","title":"③单次设置："},{"anchor":"永久设置","title":"①永久设置："}],"kind":"page","lang":"zh-hans","series":["环境配置"],"summary":"","tags":["python"],"title":"Pip设置代理","url":"/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/python/pip%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/","year":"2024"},{"content":"anaconda下载地址（官网）：\nFree Download | Anaconda\n一、创建Anaconda虚拟环境 步骤1：打开Anaconda Prompt (终端) 首先，在Windows系统中，通过开始菜单或搜索找到“Anaconda Prompt”，在Mac或Linux系统中，可以在终端中直接操作。\n步骤2：创建虚拟环境 在命令行界面输入以下命令来创建一个新的虚拟环境。这里以创建一个名为 my_project_env，并指定Python版本为3.9.10（请根据实际情况替换）的环境为例：\n1conda create --name my_project_env python=3.9.10 注意：此处——name和—n等效\n解决创建环境时出现的： Collecting package \u0026hellip; failed\n创建环境时，可能会出现以下问题\n问题分析：因为网络问题导致的创建失败\n解决方法：多试几次，仍然失败更换国内镜像源\n找到C盘用户文件夹下的.condarc文件 \\2. 编辑.condarc文件，替换成以下内容，保存，重新打开cmd即可\n1ssl_verify: true 2channels: 3 - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64/ 4 - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/win-64 show_channel_urls: true 此方法直接更换成了清华源，速度更快，更稳，通过conda向虚拟环境安装第三方包时，用的也是清华源。\n步骤3：激活虚拟环境 虚拟环境创建完成后，需要激活它以便在该环境中执行后续操作。激活环境的命令如下：\n1conda activate my_project_env 当你成功激活虚拟环境后，命令行提示符前通常会显示当前活动环境的名称，例如 (my_project_env)。\n查看所有虚拟环境的命令：\n1conda env list 二、在虚拟环境中安装第三方包 方法1：使用Conda安装 对于那些在Conda仓库中存在的包，你可以直接用 conda install 命令进行安装。例如，要安装numpy库：\n1conda install numpy 方法2：使用pip安装 对于Conda仓库中没有或者你想从PyPI获取的包，可以使用 pip 在虚拟环境中安装：\n1pip install pandas pip安装速度过慢时，可以将pip更换为国内镜像源：\n安装特定版本的包 如果需要安装特定版本的第三方包，只需在包名后面加上版本号即可：\n1conda install scipy=1.7.3 # 使用conda安装Scipy的1.7.3版本 2pip install tensorflow==2.8.0 # 使用pip安装TensorFlow的2.8.0版本 三、检查已安装的包 安装完成后，可以通过下面的命令查看虚拟环境中已经安装的所有包及其版本信息：\n1conda list 或者使用pip列出所有已安装的pip包：\n1pip list 四、关闭/退出虚拟环境 当完成工作并希望回到系统默认Python环境时，执行以下命令：\n1conda deactivate 至此，您已成功地使用Anaconda创建了一个虚拟环境，并在其中安装了所需的第三方包。这种做法有助于保持项目之间的依赖独立，使得代码更易于管理和部署。\n五、删除虚拟环境 当某个项目完成或者不再需要某个虚拟环境时，可以使用以下命令将其彻底删除：\n1conda remove --name my_project_env --all 这里的 my_project_env 是你想要删除的虚拟环境名称。执行上述命令后，Anaconda将会从系统中移除该虚拟环境及其所有安装的包和配置文件。\n注意事项：\n删除操作不可逆，请在执行此命令前确保您确实不再需要该虚拟环境中的任何内容。 确认环境名称无误，避免误删其他正在使用的虚拟环境。 请根据实际需求和最新版Anaconda的更新情况调整上述命令中的具体版本信息。\n","date":1707845958,"headings":[{"anchor":"一创建anaconda虚拟环境","title":"一、创建Anaconda虚拟环境"},{"anchor":"三检查已安装的包","title":"三、检查已安装的包"},{"anchor":"二在虚拟环境中安装第三方包","title":"二、在虚拟环境中安装第三方包"},{"anchor":"五删除虚拟环境","title":"五、删除虚拟环境"},{"anchor":"四关闭退出虚拟环境","title":"四、关闭/退出虚拟环境"},{"anchor":"安装特定版本的包","title":"安装特定版本的包"},{"anchor":"方法1使用conda安装","title":"方法1：使用Conda安装"},{"anchor":"方法2使用pip安装","title":"方法2：使用pip安装"},{"anchor":"步骤1打开anaconda-prompt-终端","title":"步骤1：打开Anaconda Prompt (终端)"},{"anchor":"步骤2创建虚拟环境","title":"步骤2：创建虚拟环境"},{"anchor":"步骤3激活虚拟环境","title":"步骤3：激活虚拟环境"}],"kind":"page","lang":"zh-hans","series":["环境配置"],"summary":"","tags":["python"],"title":"使用Anaconda管理python虚拟环境与安装第三方包","url":"/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/python/%E4%BD%BF%E7%94%A8anaconda%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/","year":"2024"},{"content":"1.临时换源： 清华源\n1pip install xxxx -i https://pypi.tuna.tsinghua.edu.cn/simple 阿里源\n1pip install xxxx -i https://mirrors.aliyun.com/pypi/simple/ 腾讯源\n1pip install xxxx -i http://mirrors.cloud.tencent.com/pypi/simple 豆瓣源\n1pip install xxxx -i http://pypi.douban.com/simple/ 将xxxx换成需要安装的包的名字\n2.永久换源： 清华源\n1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 阿里源\n1pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 腾讯源\n1pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple 豆瓣源\n1pip config set global.index-url http://pypi.douban.com/simple/ 3.换回默认源 1pip config unset global.index-url ","date":1707844801,"headings":[{"anchor":"1临时换源","title":"1.临时换源："},{"anchor":"2永久换源","title":"2.永久换源："},{"anchor":"3换回默认源","title":"3.换回默认源"}],"kind":"page","lang":"zh-hans","series":["环境配置"],"summary":"","tags":["python"],"title":"pip修改国内镜像源（临时/永久）","url":"/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/python/pip%E6%8D%A2%E6%BA%90/","year":"2024"}]